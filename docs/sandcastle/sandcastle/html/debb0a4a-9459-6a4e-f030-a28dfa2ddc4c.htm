<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>MathExpr Operators and Type Conversions</title><meta name="Title" content="Operators" /><meta name="Help.Id" content="Operators.T:Orx.MathProg.MathExpr" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Orx.MathProg" /><meta name="guid" content="debb0a4a-9459-6a4e-f030-a28dfa2ddc4c" /><meta name="tocFile" content="../toc/IDTA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Orx.MathProg (C#)</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Math<wbr />Expr Operators and Type Conversions</h1><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Operators</h2><div id="IDBDASection"><table id="OperatorList" class="table is-hoverable"><tr><td><a href="e85ccc52-2446-a857-47da-0fde75b28d29.htm">Addition(MathExpr, MathExpr)</a></td><td>
            Adds two linear expressions; and returns the resulting linear expression.
            </td></tr><tr><td><a href="f5257f44-d30c-b6da-bbf0-173cc233e450.htm">Addition(MathExpr, Sca)</a></td><td>
            Adds a linear expression and a scalar; and returns the resulting linear expression.
            </td></tr><tr><td><a href="9719204f-cf42-62a6-f3fa-dcefecd868f2.htm">Addition(MathExpr, Summation)</a></td><td>
            Adds a linear expression and a summation; and returns the resulting linear expression.
            </td></tr><tr><td><a href="e9ca6345-84cc-9cf7-ca57-1a75cf8ada7f.htm">Addition(MathExpr, Term)</a></td><td>
            Adds a linear expression and a term; and returns the resulting linear expression.
            </td></tr><tr><td><a href="a0a2f8cb-5b60-4b10-a4c8-fda452cd2578.htm">Addition(MathExpr, Var)</a></td><td>
            Adds a linear expression and a variable; and returns the resulting linear expression.
            </td></tr><tr><td><a href="2d6d5278-892a-ee90-e2d2-8cd0902b5740.htm">Addition(MathExpr, VarD0)</a></td><td>
            Adds a linear expression and a variable; and returns the resulting linear expression.
            </td></tr><tr><td><a href="6b1483b4-ec0d-1eb0-f187-7eb214f8adfc.htm">Addition(Sca, MathExpr)</a></td><td>
            Adds a linear expression and a scalar; and returns the resulting linear expression.
            </td></tr><tr><td><a href="95fa2ab3-2027-bf92-f72c-136a929cc99f.htm">Addition(Summation, MathExpr)</a></td><td>
            Adds a linear expression and a summation; and returns the resulting linear expression.
            </td></tr><tr><td><a href="5f4fad59-755c-9951-c14d-ad9a267f5270.htm">Addition(Term, MathExpr)</a></td><td>
            Adds a linear expression and a term; and returns the resulting linear expression.
            </td></tr><tr><td><a href="0fb087ae-5e92-9615-d566-f177bc96219b.htm">Addition(Var, MathExpr)</a></td><td>
            Adds a linear expression and a variable; and returns the resulting linear expression.
            </td></tr><tr><td><a href="afa0e4c4-180d-9e4b-bc04-2a999b76fd27.htm">Addition(VarD0, MathExpr)</a></td><td>
            Adds a linear expression and a variable; and returns the resulting linear expression.
            </td></tr><tr><td><a href="2ae3b4b1-2562-9952-57d0-3038b51c2602.htm">Division(MathExpr, Sca)</a></td><td>
            Divides a linear expression by a scalar; and returns the resulting linear expression.
            </td></tr><tr><td><a href="e8b59fd1-3447-9b7a-51ba-ec1669abb969.htm">Equality(MathExpr, MathExpr)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) == sum(over(j), x[j, i]);
Constraint     con  = forall(i) | sum(over(j), x[i, j]) == sum(over(j), x[j, i]);</code></pre></div></div></td></tr><tr><td><a href="17f5bdab-a5bc-0564-186b-90199c2d1ddc.htm">Equality(MathExpr, Sca)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) == demand[i];
Constraint     con  = forall(i) | sum(over(j), x[i, j]) == demand[i];</code></pre></div></div></td></tr><tr><td><a href="38a45eb7-79a0-b15f-f641-fa659a438711.htm">Equality(MathExpr, Summation)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) == sum(over(j), x[j, i]);
Constraint     con  = forall(i) | sum(over(j), x[i, j]) == sum(over(j), x[j, i]);</code></pre></div></div></td></tr><tr><td><a href="a7e31151-f803-d4fc-e68b-7a1749cf1bc0.htm">Equality(MathExpr, Term)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) == demand[i];
Constraint     con  = forall(i) | sum(over(j), x[i, j]) == demand[i];</code></pre></div></div></td></tr><tr><td><a href="c1abffd8-0797-f0b7-109f-fdbce0699674.htm">Equality(MathExpr, Var)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) == demand[i];
Constraint     con  = forall(i) | sum(over(j), x[i, j]) == demand[i];</code></pre></div></div></td></tr><tr><td><a href="be492af4-a569-9a50-6a14-672efc7ca35a.htm">Equality(MathExpr, VarD0)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) == demand[i];
Constraint     con  = forall(i) | sum(over(j), x[i, j]) == demand[i];</code></pre></div></div></td></tr><tr><td><a href="99d95293-5e67-1831-ebc5-499348be42af.htm">Equality(Sca, MathExpr)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             demand[i] == sum(over(j), x[i, j]);
Constraint     con  = forall(i) | demand[i] == sum(over(j), x[i, j]);</code></pre></div></div></td></tr><tr><td><a href="c439733f-3479-1d59-d47b-4d72f0336100.htm">Equality(Summation, MathExpr)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) == sum(over(j), x[j, i]);
Constraint     con  = forall(i) | sum(over(j), x[i, j]) == sum(over(j), x[j, i]);</code></pre></div></div></td></tr><tr><td><a href="a9c7bbc1-0738-cb9b-310b-d9f845b35dcd.htm">Equality(Term, MathExpr)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             demand[i] == sum(over(j), x[i, j]);
Constraint     con  = forall(i) | demand[i] == sum(over(j), x[i, j]);</code></pre></div></div></td></tr><tr><td><a href="320e7852-d156-5c11-bf6f-7d75aaa20824.htm">Equality(Var, MathExpr)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             demand[i] == sum(over(j), x[i, j]);
Constraint     con  = forall(i) | demand[i] == sum(over(j), x[i, j]);</code></pre></div></div></td></tr><tr><td><a href="aac2574a-9f27-d4d6-8ccf-1febd39b6528.htm">Equality(VarD0, MathExpr)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             demand[i] == sum(over(j), x[i, j]);
Constraint     con  = forall(i) | demand[i] == sum(over(j), x[i, j]);</code></pre></div></div></td></tr><tr><td><a href="6ed6e231-c3b7-21c9-efb7-1abb0d0367f9.htm">GreaterThanOrEqual(MathExpr, MathExpr)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &gt;= sum(over(j), x[j, i]);
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &gt;= sum(over(j), x[j, i]);</code></pre></div></div></td></tr><tr><td><a href="11cab826-f276-62be-bdd6-6113d14c0c12.htm">GreaterThanOrEqual(MathExpr, Sca)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &gt;= demand[i];
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &gt;= demand[i];</code></pre></div></div></td></tr><tr><td><a href="d27d203f-49a6-4757-7b49-f4e835f60916.htm">GreaterThanOrEqual(MathExpr, Summation)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &gt;= sum(over(j), x[j, i]);
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &gt;= sum(over(j), x[j, i]);</code></pre></div></div></td></tr><tr><td><a href="7ee80f76-aacc-fd01-b5ca-6505479e13a9.htm">GreaterThanOrEqual(MathExpr, Term)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &gt;= demand[i];
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &gt;= demand[i];</code></pre></div></div></td></tr><tr><td><a href="828c50db-f055-21c4-76bd-2165dcc4e8f7.htm">GreaterThanOrEqual(MathExpr, Var)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &gt;= demand[i];
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &gt;= demand[i];</code></pre></div></div></td></tr><tr><td><a href="6efd15a9-dbb0-992c-ea78-9eb5ecd6e5e4.htm">GreaterThanOrEqual(MathExpr, VarD0)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &gt;= demand[i];
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &gt;= demand[i];</code></pre></div></div></td></tr><tr><td><a href="8952b980-1b37-08cb-dc74-80ed819d3790.htm">GreaterThanOrEqual(Sca, MathExpr)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             capacity[i] &gt;= sum(over(j), x[i, j]);
Constraint     con  = forall(i) | capacity[i] &gt;= sum(over(j), x[i, j]);</code></pre></div></div></td></tr><tr><td><a href="4ef5f3a7-ade9-19f8-9ece-f5b9f0038a00.htm">GreaterThanOrEqual(Summation, MathExpr)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &gt;= sum(over(j), x[j, i]);
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &gt;= sum(over(j), x[j, i]);</code></pre></div></div></td></tr><tr><td><a href="0940e12d-8063-0fb6-b12a-8bff98a2e7c0.htm">GreaterThanOrEqual(Term, MathExpr)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             capacity[i] &gt;= sum(over(j), x[i, j]);
Constraint     con  = forall(i) | capacity[i] &gt;= sum(over(j), x[i, j]);</code></pre></div></div></td></tr><tr><td><a href="adfb9bdc-ffd4-f3da-f0e8-dbbea28dddc4.htm">GreaterThanOrEqual(Var, MathExpr)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             capacity[i] &gt;= sum(over(j), x[i, j]);
Constraint     con  = forall(i) | capacity[i] &gt;= sum(over(j), x[i, j]);</code></pre></div></div></td></tr><tr><td><a href="f9f21b0f-1b48-5042-7359-2a6f6bdf3a7c.htm">GreaterThanOrEqual(VarD0, MathExpr)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             capacity[i] &gt;= sum(over(j), x[i, j]);
Constraint     con  = forall(i) | capacity[i] &gt;= sum(over(j), x[i, j]);</code></pre></div></div></td></tr><tr><td><a href="d9e39752-6b2e-87af-8df1-4dfd40e11e3d.htm"><span id="LST381F0AF8_0" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(Double to MathExpr)</a></td><td>
            Implicitly converts the scalar to a linear expression.
            </td></tr><tr><td><a href="3f7b4bd3-a6db-c9a2-7279-eb33af00ce4a.htm"><span id="LST381F0AF8_1" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(Int32 to MathExpr)</a></td><td>
            Implicitly converts the scalar to a linear expression.
            </td></tr><tr><td><a href="b8a3517c-0b57-b21f-0df3-b7e3a6eca15f.htm"><span id="LST381F0AF8_2" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(Sca to MathExpr)</a></td><td>
            Implicitly converts the scalar to a linear expression.
            </td></tr><tr><td><a href="6e6199ce-03e6-32df-9c64-ac2c365a2d67.htm"><span id="LST381F0AF8_3" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(Set to MathExpr)</a></td><td>
            Implicitly converts the set into a scalar and then into a linear expression.
            </td></tr><tr><td><a href="b6287637-51ff-b349-e97f-022a716d4baf.htm"><span id="LST381F0AF8_4" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(Summation to MathExpr)</a></td><td>
            Implicitly converts the linear summation to a linear expression.
            </td></tr><tr><td><a href="67af5ed6-0f8e-1e69-d486-e986163c9495.htm"><span id="LST381F0AF8_5" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(Term to MathExpr)</a></td><td>
            Implicitly converts the linear term to a linear expression.
            </td></tr><tr><td><a href="06f299bd-bdfc-0717-cc6a-aca375131b83.htm"><span id="LST381F0AF8_6" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(Var to MathExpr)</a></td><td>
            Implicitly converts the variable to a linear expression.
            </td></tr><tr><td><a href="02515fe6-d23b-0642-1808-aa30d77f7948.htm"><span id="LST381F0AF8_7" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(VarD0 to MathExpr)</a></td><td>
            Implicitly converts the variable to a linear expression.
            </td></tr><tr><td><a href="ac9eb794-100e-975a-4696-25a08e2cae2d.htm">Inequality(MathExpr, MathExpr)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="2eff98fe-36d6-d49f-25c5-b0a00981f88b.htm">Inequality(MathExpr, Sca)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="9bb41d52-78e8-bba3-33a4-3100d57a1ec7.htm">Inequality(MathExpr, Summation)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="88af3e95-3824-1953-7892-da0544fe4313.htm">Inequality(MathExpr, Term)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="0a9f1f59-788b-1e4f-e8d3-962a856649a6.htm">Inequality(MathExpr, Var)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="13ab045f-aaa0-75ea-14b7-9da1f73d4a00.htm">Inequality(MathExpr, VarD0)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="ded315a8-e2a0-8020-e97a-7c7c8dc2be7b.htm">Inequality(Sca, MathExpr)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="abdffb2d-22a6-2dad-e606-9613eb0a058e.htm">Inequality(Summation, MathExpr)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="5f3f76a5-1948-2905-5085-523e4278e7d4.htm">Inequality(Term, MathExpr)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="cded1e39-26c2-c5ff-974a-033d8a7a1be7.htm">Inequality(Var, MathExpr)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="a1ec12bb-27be-ace3-f161-00e1b3f216d5.htm">Inequality(VarD0, MathExpr)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="25785d29-0106-0093-17f8-03f7e123168d.htm">LessThanOrEqual(MathExpr, MathExpr)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &lt;= sum(over(j), x[j, i]);
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &lt;= sum(over(j), x[j, i]);</code></pre></div></div></td></tr><tr><td><a href="ca19ef0e-74ab-497f-958e-6a28a38e109a.htm">LessThanOrEqual(MathExpr, Sca)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &lt;= capacity[i];
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &lt;= capacity[i];</code></pre></div></div></td></tr><tr><td><a href="71880195-6ee3-68f9-5db9-43318ec9b641.htm">LessThanOrEqual(MathExpr, Summation)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &lt;= sum(over(j), x[j, i]);
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &lt;= sum(over(j), x[j, i]);</code></pre></div></div></td></tr><tr><td><a href="00aba8ee-7f0e-b306-56db-1db19b97d263.htm">LessThanOrEqual(MathExpr, Term)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &lt;= capacity[i];
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &lt;= capacity[i];</code></pre></div></div></td></tr><tr><td><a href="7cfb2fda-cb15-a18b-b747-a2c018ca1c77.htm">LessThanOrEqual(MathExpr, Var)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &lt;= capacity[i];
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &lt;= capacity[i];</code></pre></div></div></td></tr><tr><td><a href="ac288a5d-a360-13a2-2bef-4e81c4c79bb3.htm">LessThanOrEqual(MathExpr, VarD0)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &lt;= capacity[i];
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &lt;= capacity[i];</code></pre></div></div></td></tr><tr><td><a href="92bbcbbf-2ece-5ace-3413-ccd229d0094f.htm">LessThanOrEqual(Sca, MathExpr)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             demand[i] &lt;= sum(over(j), x[i, j]);
Constraint     con  = forall(i) | demand[i] &lt;= sum(over(j), x[i, j]);</code></pre></div></div></td></tr><tr><td><a href="44119915-0d6d-378f-2e39-cef5a3baa4b9.htm">LessThanOrEqual(Summation, MathExpr)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             sum(over(j), x[i, j]) &lt;= sum(over(j), x[j, i]);
Constraint     con  = forall(i) | sum(over(j), x[i, j]) &lt;= sum(over(j), x[j, i]);</code></pre></div></div></td></tr><tr><td><a href="28f33118-17cb-144d-8089-d55110821361.htm">LessThanOrEqual(Term, MathExpr)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             demand[i] &lt;= sum(over(j), x[i, j]);
Constraint     con  = forall(i) | demand[i] &lt;= sum(over(j), x[i, j]);</code></pre></div></div></td></tr><tr><td><a href="c5c21704-d64d-93fe-5e7b-b0f17d819eef.htm">LessThanOrEqual(Var, MathExpr)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             demand[i] &lt;= sum(over(j), x[i, j]);
Constraint     con  = forall(i) | demand[i] &lt;= sum(over(j), x[i, j]);</code></pre></div></div></td></tr><tr><td><a href="f5f30263-0d03-a5a2-0afe-942183223496.htm">LessThanOrEqual(VarD0, MathExpr)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =             demand[i] &lt;= sum(over(j), x[i, j]);
Constraint     con  = forall(i) | demand[i] &lt;= sum(over(j), x[i, j]);</code></pre></div></div></td></tr><tr><td><a href="b8c75176-d51d-3573-bfef-39c53839ddf6.htm">Multiply(MathExpr, Sca)</a></td><td>
            Multiplies a linear expression with a scalar; and returns the resulting linear expression.
            </td></tr><tr><td><a href="acc4338a-9803-4a7e-a5bd-a687a3bb1b15.htm">Multiply(Sca, MathExpr)</a></td><td>
            Multiplies a linear expression with a scalar; and returns the resulting linear expression.
            </td></tr><tr><td><a href="5ab0a1e1-8505-6621-790a-2091c0c246c6.htm">Subtraction(MathExpr, MathExpr)</a></td><td>
            Subtracts a linear expression from another; and returns the resulting linear expression.
            </td></tr><tr><td><a href="7f429be4-0d34-cb01-c7f4-82ed20dffb07.htm">Subtraction(MathExpr, Sca)</a></td><td>
            Subtracts a scalar from a linear expression; and returns the resulting linear expression.
            </td></tr><tr><td><a href="b9be27cc-fbf7-16f4-a847-413b644b004d.htm">Subtraction(MathExpr, Summation)</a></td><td>
            Subtracts a summation from a linear expression; and returns the resulting linear expression.
            </td></tr><tr><td><a href="7526f02b-b3f1-cb8b-9533-80c65e510fdf.htm">Subtraction(MathExpr, Term)</a></td><td>
            Subtracts a linear term from a linear expression; and returns the resulting linear expression.
            </td></tr><tr><td><a href="af0d52dd-cca5-db4d-a5f1-ad9b4451328c.htm">Subtraction(MathExpr, Var)</a></td><td>
            Subtracts a variable from a linear expression; and returns the resulting linear expression.
            </td></tr><tr><td><a href="75cd4657-769f-c847-eca1-71b9ca1bc4c6.htm">Subtraction(MathExpr, VarD0)</a></td><td>
            Subtracts a variable from a linear expression; and returns the resulting linear expression.
            </td></tr><tr><td><a href="e15c26f6-f216-2e9a-1bf5-7a6e1aa01863.htm">Subtraction(Sca, MathExpr)</a></td><td>
            Subtracts a linear expression from a scalar; and returns the resulting linear expression.
            </td></tr><tr><td><a href="f9960d25-755b-bd31-5058-81ba1ee096e2.htm">Subtraction(Summation, MathExpr)</a></td><td>
            Subtracts a linear expression from a summation; and returns the resulting linear expression.
            </td></tr><tr><td><a href="9f6460dc-4d54-780b-8723-badcb42ef77f.htm">Subtraction(Term, MathExpr)</a></td><td>
            Subtracts a linear expression from a term; and returns the resulting linear expression.
            </td></tr><tr><td><a href="c65af3eb-559a-ad78-b3b9-ce37b9989171.htm">Subtraction(Var, MathExpr)</a></td><td>
            Subtracts a linear expression from a variable; and returns the resulting linear expression.
            </td></tr><tr><td><a href="9c574f70-9ac8-31e5-bd82-dfcb55a98734.htm">Subtraction(VarD0, MathExpr)</a></td><td>
            Subtracts a linear expression from a variable; and returns the resulting linear expression.
            </td></tr><tr><td><a href="f41d7179-3682-965c-acdf-45c47d1a8518.htm">UnaryNegation(MathExpr)</a></td><td>
            Negates the linear expression.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="08f927b4-b298-eb5c-8a5b-2122d2553867.htm">MathExpr Class</a></div><div><a href="b58113de-60d8-4f5d-76d7-a9e96ffb2213.htm">Orx.MathProg Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Operators</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column">https://github.com/orxfun/orx-mathprog-gallery<div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:orx.ugur.arikan%40gmail.com?Subject=Orx.MathProg%20(C#)">orx.ugur.arikan@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>