<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Term Class</title><meta name="Title" content="Term" /><meta name="Help.Id" content="T:Orx.MathProg.Term" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Orx.MathProg" /><meta name="guid" content="8f62d8c1-7282-ef6c-db43-b40d1ed3fe6e" /><meta name="Description" content="A linear mathematical term in the form of ' · '. For instance: 2 * totalCost is a term where totalCost is of type . cost[i, j] * x[i, j] is a term where cost is of type and x is of type . Note that, given i and j are s; x[i, j] is a and cost[i, j] is a ." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Orx.MathProg (C#)</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Term Class</h1><div class="summary">
            A linear mathematical term in the form of '<a href="2bddf190-1c2c-d994-6e06-23708037f912.htm">Sca</a> · <a href="bab621d9-221d-7d9b-1acd-b7525bf8068f.htm">Var</a>'. For instance:
            <ul><li><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">2 * totalCost</code></pre></div></div>
            is a term where totalCost is of type <a href="16abb95a-df22-05c0-304a-cc86c1ccd98c.htm">VarD0</a>.
            </li><li><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">cost[i, j] * x[i, j]</code></pre></div></div>
            is a term where cost is of type <a href="6915174e-9e72-a17c-24b5-b175f52d09f1.htm">ParD2</a> and x is of type <a href="e5855b03-aa28-38d9-75eb-04f403331b7a.htm">VarD2</a>.
            Note that, given i and j are <a href="e26c1ac6-aca2-9af1-2a70-cdfb5412a96d.htm">Set</a>s; x[i, j] is a <a href="bab621d9-221d-7d9b-1acd-b7525bf8068f.htm">Var</a> and cost[i, j] is a <a href="2bddf190-1c2c-d994-6e06-23708037f912.htm">Sca</a>.
            </li><li><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">2 * cost[i, j] / (1 + demand[i]) * y[j]</code></pre></div></div>
            is also a term.
            The scalar; i.e., the coefficient can be expressed as mathematical operations.
            Note that the order is not strict as long as linearity is satisfied.
            Above term for instance could also be expressed as:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">2 * cost[i, j] * y[j] / (1 + demand[i])</code></pre></div></div></li></ul></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="b58113de-60d8-4f5d-76d7-a9e96ffb2213.htm">Orx.MathProg</a><br /><strong>Assembly:</strong> Orx.MathProg (in Orx.MathProg.dll) Version: 1.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Term</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">Term</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDAEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="ff578b65-a139-84cc-4b36-f3728ffbbdb0.htm">Equals</a></td><td>
            Compares this to <span class="parameter">obj</span> wrt reference equality.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Object<span id="LST61FDE006_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Equals(Object)</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.finalize#system-object-finalize" target="_blank" rel="noopener noreferrer">Finalize</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="f0cd1dc4-711d-5a95-7a95-763231760b39.htm">GetHashCode</a></td><td>
            Returns the hash code.
            <br />(Overrides <a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">Object<span id="LST61FDE006_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>GetHashCode<span id="LST61FDE006_2" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone#system-object-memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Operators</h2><div id="IDDEASection"><table id="OperatorList" class="table is-hoverable"><tr><td><a href="e0a09b9c-a14f-b6da-9254-e00073328de6.htm">Addition(Sca, Term)</a></td><td>
            Adds a term and a scalar; and returns the resulting linear expression.
            </td></tr><tr><td><a href="5f39a2f8-1a6a-eec4-b43e-8aacf599f189.htm">Addition(Term, Sca)</a></td><td>
            Adds a term and a scalar; and returns the resulting linear expression.
            </td></tr><tr><td><a href="58f976ea-e4ff-d17e-abc8-a9d906d0a853.htm">Addition(Term, Term)</a></td><td>
            Adds two terms; and returns the resulting linear expression.
            </td></tr><tr><td><a href="a198e4d4-97f9-ae04-faee-a9abbaf2545a.htm">Addition(Term, Var)</a></td><td>
            Adds a term and a variable; and returns the resulting linear expression.
            </td></tr><tr><td><a href="4ae2dcee-a15c-5a5e-9e6f-68e472974ba0.htm">Addition(Term, VarD0)</a></td><td>
            Adds a term and a variable; and returns the resulting linear expression.
            </td></tr><tr><td><a href="55a6eb2a-4c97-68ee-65a5-a7e87b893dae.htm">Addition(Var, Term)</a></td><td>
            Adds a term and a variable; and returns the resulting linear expression.
            </td></tr><tr><td><a href="8391435e-4b68-e75f-acec-de2c2358d7c5.htm">Addition(VarD0, Term)</a></td><td>
            Adds a term and a variable; and returns the resulting linear expression.
            </td></tr><tr><td><a href="5fe3010d-6d54-3598-32da-75a05407429f.htm">Division(Term, Sca)</a></td><td>
            Divides a term by a scalar and returns the resulting linear term.
            </td></tr><tr><td><a href="9394c5cd-b067-7061-4f66-2fb5cee2585b.htm">Equality(Sca, Term)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                required[i, j] == density * x[i, j];
Constraint     con  = forall(i, j) | required[i, j] == density * x[i, j];</code></pre></div></div></td></tr><tr><td><a href="5bb13d07-ff2c-568e-3520-961d6e3e2d19.htm">Equality(Term, Sca)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] == required[i, j];
Constraint     con  = forall(i, j) | density * x[i, j] == required[i, j];</code></pre></div></div></td></tr><tr><td><a href="a3dd8487-cdd0-f990-368a-a91e9e9dfbf4.htm">Equality(Term, Term)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                flowInM3[i, j] == density * x[i, j];
Constraint     con  = forall(i, j) | flowInM3[i, j] == density * x[i, j];</code></pre></div></div></td></tr><tr><td><a href="22f84372-f7c4-5337-8568-2ae919234554.htm">Equality(Term, Var)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] == assignedDemand;
Constraint     con  = forall(i, j) | density * x[i, j] == assignedDemand;</code></pre></div></div></td></tr><tr><td><a href="2792af5b-b2c9-fa1a-88d8-167d58d6fbca.htm">Equality(Term, VarD0)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] == assignedDemand;
Constraint     con  = forall(i, j) | density * x[i, j] == assignedDemand;</code></pre></div></div></td></tr><tr><td><a href="ae69938a-2693-ca37-9d86-1f1c07db5914.htm">Equality(Var, Term)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] == assignedDemand;
Constraint     con  = forall(i, j) | density * x[i, j] == assignedDemand;</code></pre></div></div></td></tr><tr><td><a href="de42be72-44b3-9de8-433a-57f4145a246e.htm">Equality(VarD0, Term)</a></td><td>
            Creates a constraint expression where lhs = rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] == assignedDemand;
Constraint     con  = forall(i, j) | density * x[i, j] == assignedDemand;</code></pre></div></div></td></tr><tr><td><a href="d7ccaf4b-133e-57cb-c5b6-fc5015bdee44.htm">GreaterThanOrEqual(Sca, Term)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                capacity[i, j] &gt;= density * x[i, j];
Constraint     con  = forall(i, j) | capacity[i, j] &gt;= density * x[i, j];</code></pre></div></div></td></tr><tr><td><a href="7c646a6a-1532-425f-0a20-220bbd78c066.htm">GreaterThanOrEqual(Term, Sca)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] &gt;= required[i, j];
Constraint     con  = forall(i, j) | density * x[i, j] &gt;= required[i, j];</code></pre></div></div></td></tr><tr><td><a href="9ad9c498-4f77-f595-1d01-5e1650ac82b8.htm">GreaterThanOrEqual(Term, Term)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                M * y[i] &gt;= density * x[i, j];
Constraint     con  = forall(i, j) | M * y[i] &gt;= density * x[i, j];</code></pre></div></div></td></tr><tr><td><a href="1942c3dc-01ab-ad9d-04f9-28788cb5ec6e.htm">GreaterThanOrEqual(Term, Var)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] &gt;= assignedDemand;
Constraint     con  = forall(i, j) | density * x[i, j] &gt;= assignedDemand;</code></pre></div></div></td></tr><tr><td><a href="b0bb9d06-462d-bcc8-0dad-9b62d3215f65.htm">GreaterThanOrEqual(Term, VarD0)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] &gt;= assignedDemand;
Constraint     con  = forall(i, j) | density * x[i, j] &gt;= assignedDemand;</code></pre></div></div></td></tr><tr><td><a href="23937cd7-ee83-c0b3-972d-4c10efeb1919.htm">GreaterThanOrEqual(Var, Term)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] &gt;= assignedDemand;
Constraint     con  = forall(i, j) | density * x[i, j] &gt;= assignedDemand;</code></pre></div></div></td></tr><tr><td><a href="ca1b3846-6fc2-be95-0c72-e212a24424ce.htm">GreaterThanOrEqual(VarD0, Term)</a></td><td>
            Creates a constraint expression where lhs &gt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] &gt;= assignedDemand;
Constraint     con  = forall(i, j) | density * x[i, j] &gt;= assignedDemand;</code></pre></div></div></td></tr><tr><td><a href="781986ed-e59f-e62a-ed1d-f3dddc9c4045.htm"><span id="LST61FDE006_3" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(Var to Term)</a></td><td>
            Implicit conversion of a variable to a linear term where the coefficient is 1.
            </td></tr><tr><td><a href="72088cb8-7bc6-b148-e64a-b9ba2ddbff8f.htm"><span id="LST61FDE006_4" data-languageSpecificText="cs=Implicit|vb=Widening|cpp=Implicit|nu=Implicit|fs=Implicit"></span>(VarD0 to Term)</a></td><td>
            Implicit conversion of a variable to a linear term where the coefficient is 1.
            </td></tr><tr><td><a href="548abde6-bacc-673e-5414-7d16744287f9.htm">Inequality(Sca, Term)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="d5e85e13-18e5-e927-c55c-6320b55e77f8.htm">Inequality(Term, Sca)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="1ddfe27b-e972-0211-e9ae-ede9ef797b15.htm">Inequality(Term, Term)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="f23a6410-6716-7a96-5d4a-05bc6cf8586b.htm">Inequality(Term, Var)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="73d75641-23df-4091-686b-b8ad4ad7d3c3.htm">Inequality(Term, VarD0)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="90c3cf8c-8ba7-6255-fc81-c586a73f2e2b.htm">Inequality(Var, Term)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="dcb35f6c-5c1f-8970-625a-93a052fd63ea.htm">Inequality(VarD0, Term)</a></td><td>
            Invalid operation; throws an exception.
            </td></tr><tr><td><a href="ed8fd2f0-7f01-357b-1352-2f2611f4be73.htm">LessThanOrEqual(Sca, Term)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                required[i, j] &lt;= density * x[i, j];
Constraint     con  = forall(i, j) | required[i, j] &lt;= density * x[i, j];</code></pre></div></div></td></tr><tr><td><a href="7921697c-2f3c-cf02-8976-b2846e389612.htm">LessThanOrEqual(Term, Sca)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] &lt;= capacity[i, j];
Constraint     con  = forall(i, j) | density * x[i, j] &lt;= capacity[i, j];</code></pre></div></div></td></tr><tr><td><a href="bd7ef21a-9628-107c-90f1-508f303b9cce.htm">LessThanOrEqual(Term, Term)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] &lt;= M * y[i];
Constraint     con  = forall(i, j) | density * x[i, j] &lt;= M * y[i];</code></pre></div></div></td></tr><tr><td><a href="ff8819da-4231-ce6e-c173-060512322699.htm">LessThanOrEqual(Term, Var)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] &lt;= assignedCapacity;
Constraint     con  = forall(i, j) | density * x[i, j] &lt;= assignedCapacity;</code></pre></div></div></td></tr><tr><td><a href="04cf1840-d045-ac67-c02e-7a41a3132ff8.htm">LessThanOrEqual(Term, VarD0)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] &lt;= assignedCapacity;
Constraint     con  = forall(i, j) | density * x[i, j] &lt;= assignedCapacity;</code></pre></div></div></td></tr><tr><td><a href="7c8c81b0-478a-ca68-c3b0-b87d3558bed9.htm">LessThanOrEqual(Var, Term)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] &lt;= assignedCapacity;
Constraint     con  = forall(i, j) | density * x[i, j] &lt;= assignedCapacity;</code></pre></div></div></td></tr><tr><td><a href="33a67ec0-25d0-392d-99f1-b265a534c04a.htm">LessThanOrEqual(VarD0, Term)</a></td><td>
            Creates a constraint expression where lhs &lt;= rhs.
            <p>Note that a constraint is composed of a constraint expression and forall sets expression.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">ConstraintExpr expr =                density * x[i, j] &lt;= assignedCapacity;
Constraint     con  = forall(i, j) | density * x[i, j] &lt;= assignedCapacity;</code></pre></div></div></td></tr><tr><td><a href="0ef63e0b-158a-450e-4e6e-44e454a3ea94.htm">Multiply(Sca, Term)</a></td><td>
            Multiplies a scalar with a term and returns the resulting linear term.
            </td></tr><tr><td><a href="6d15b2d3-c56c-d4f4-3298-9814360268ae.htm">Multiply(Term, Sca)</a></td><td>
            Multiplies a scalar with a term and returns the resulting linear term.
            </td></tr><tr><td><a href="f15f864c-3b26-254a-2d91-bf45c4b7d7e5.htm">Subtraction(Sca, Term)</a></td><td>
            Substracts a term from a scalar; and returns the resulting linear expression.
            </td></tr><tr><td><a href="3c9b868b-2126-5da0-b8d2-ba8bf0f0063d.htm">Subtraction(Term, Sca)</a></td><td>
            Substracts a scalar from a term; and returns the resulting linear expression.
            </td></tr><tr><td><a href="4915a1cf-52f5-f137-cfc3-fa1905427aec.htm">Subtraction(Term, Term)</a></td><td>
            Substracts one term from another; and returns the resulting linear expression.
            </td></tr><tr><td><a href="b9fca29c-81a7-0b28-6cb1-84bdf8cdb871.htm">Subtraction(Term, Var)</a></td><td>
            Substracts a variable from a term; and returns the resulting linear expression.
            </td></tr><tr><td><a href="032447fb-da27-be49-0055-45bf466935eb.htm">Subtraction(Term, VarD0)</a></td><td>
            Substracts a variable from a term; and returns the resulting linear expression.
            </td></tr><tr><td><a href="e342c1ec-47f3-534f-69ea-a8321b6b5248.htm">Subtraction(Var, Term)</a></td><td>
            Substracts a term from a variable; and returns the resulting linear expression.
            </td></tr><tr><td><a href="17cc066c-437e-b1e3-d93f-e0d1f89ddd39.htm">Subtraction(VarD0, Term)</a></td><td>
            Substracts a term from a variable; and returns the resulting linear expression.
            </td></tr><tr><td><a href="a793e569-9a7f-c2d9-a00b-72383deef576.htm">UnaryNegation(Term)</a></td><td>
            Negates the term; i.e., negates the coefficient of the term.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="b58113de-60d8-4f5d-76d7-a9e96ffb2213.htm">Orx.MathProg Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Operators</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column">https://github.com/orxfun/orx-mathprog-gallery<div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:orx.ugur.arikan%40gmail.com?Subject=Orx.MathProg%20(C#)">orx.ugur.arikan@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>