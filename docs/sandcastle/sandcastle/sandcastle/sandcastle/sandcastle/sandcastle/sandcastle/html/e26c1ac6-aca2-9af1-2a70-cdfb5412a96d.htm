<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Set Class</title><meta name="Title" content="Set" /><meta name="Help.Id" content="T:Orx.MathProg.Set" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Orx.MathProg" /><meta name="guid" content="e26c1ac6-aca2-9af1-2a70-cdfb5412a96d" /><meta name="Description" content="A set / index to be used in constraints' forall expressions, summations' sum over expressions and finally as indices of variables and parameters having a dimension &gt;= 1. A set is constructed using builder pattern that can be initiated by function." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Orx.MathProg (C#)</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Set Class</h1><div class="summary">
            A set / index to be used in constraints' forall expressions, summations' sum over expressions and finally as indices of variables and parameters having a dimension &gt;= 1.
            
            <p>
            A set is constructed using builder pattern that can be initiated by <a href="0385e888-c935-c43d-7bc2-17474ce2a504.htm">Set(String)</a> function.
            The following example demonstrates construction of sets.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Set j = Set("j").Represents("Nodes of the network.").HasElementsUntil(data.NumNodes);
Set i = Set("i").Represents("Tails of edges incoming to j").DependsOn(j).HasElements(data.TailsOf);
Set k = Set("k").Represents("Heads of edges outgoing from j").DependsOn(j).HasElements(data.HeadsOf);

// or definitions can be omitted; however, they might be useful in automatically generated LaTex, html or text documentations.
Set j = Set("j").HasElementsUntil(data.NumNodes);
Set i = Set("i").DependsOn(j).HasElements(data.TailsOf);
Set k = Set("k").DependsOn(j).HasElements(data.HeadsOf);</code></pre></div></div><p>The following flow balance constraint demonstrates the usage of the sets.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Set i = ...;
Set j = ...;
VarD2 x = ...; // arc flow variable
ParD1 supply = ...; // parameter representing the supply at each node

Constraint flowBal = forall(i)
                    | sum(over(j), x[i, j]) == sum(over(j), x[j, i]) + supply[i];</code></pre></div></div>
            
            Here, the sets i and j have the following functionalities:
            <ul><li>
            forall(i):
            Used in constraint's forall expression to define the set of constraints to be created; a constraint will be created for every value of i.
            </li><li>
            over(j):
            Used in summation's sum-over expression to define the expressions to be summed; an expression will be created for every value of j.
            </li><li>
            x[i, j]:
            Used to represent the scalar variable from the two-dimensional variable symbol x.
            Note that x is of type <a href="e5855b03-aa28-38d9-75eb-04f403331b7a.htm">VarD2</a> and requires two indices to scalarize.
            It is also possible to use expressions as indices such as "x[0, 0]", "x[i + j, 0]", "x[i, i]", etc.
            The values of the sets are lazy and are replaced by the value generated either by a summation's sum-over sets expression or by a constraint's forall sets expression.
            Here, value of i will be set by "forall(i)" expression of the constraint and j will be set by "over(j)" expression of the summation.
            </li><li>
            demand[i]:
            Similar to the scalarization of the variable; here the set i is used as the scalarization of "supply" which is of type <a href="e4348208-fd7f-b6a1-98bd-c33521647646.htm">ParD1</a>.
            </li></ul></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="b58113de-60d8-4f5d-76d7-a9e96ffb2213.htm">Orx.MathProg</a><br /><strong>Assembly:</strong> Orx.MathProg (in Orx.MathProg.dll) Version: 1.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Set</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">Set</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Properties</h2><div id="IDPEASection"><table id="PropertyList" class="table is-hoverable"><tr><td><a href="02f18568-afba-9c9c-1836-a6abbdbce75c.htm">Key</a></td><td>
            Key of the set.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDDEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="11cd33b8-6daa-c1d2-885a-c0c1294bb92e.htm">Alias<span id="LST804A51FE_0" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a></td><td>
            Creates and returns an alias of the set.
            
            <p>
            Alias allows to reuse a set definition in different places; such as i and j in the following flow balance constraint example.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int numNodes = 10;
Set i = Set("i").Represents("A node of the network").HasElementsUntil(numNodes);
Set j = i.Alias();

Constraint flowBal = forall(i)
                    | sum(over(j), x[i, j]) == sum(over(j), x[j, i]) + supply[i];</code></pre></div></div></td></tr><tr><td><a href="91150136-5a3d-4bea-8227-47a874814de4.htm">Alias(String)</a></td><td>
            Creates and returns an alias of the set; however with a new key (recommended).
            
            <p>
            Alias allows to reuse a set definition in different places; such as i and j in the following flow balance constraint example.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int numNodes = 10;
Set i = Set("i").Represents("A node of the network").HasElementsUntil(numNodes);
Set j = i.Alias("j");

Constraint flowBal = forall(i)
                    | sum(over(j), x[i, j]) == sum(over(j), x[j, i]) + supply[i];</code></pre></div></div></td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.finalize#system-object-finalize" target="_blank" rel="noopener noreferrer">Finalize</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gethashcode#system-object-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="019bff44-ffc4-f960-4b1e-7bd31dcc25a0.htm">GetSummary</a></td><td>
            Returns a summary information about the set; useful for debugging.
            </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone#system-object-memberwiseclone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.tostring#system-object-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Operators</h2><div id="IDIEASection"><table id="OperatorList" class="table is-hoverable"><tr><td><a href="05bbda5b-cd31-f395-e13a-dd1d9b90939d.htm">Addition(Double, Set)</a></td><td>
            Adds two scalars one of which is implicitly created from a set, and returns the resulting scalar.
            </td></tr><tr><td><a href="5332a027-ce5b-0d50-4d32-b6df4624931c.htm">Addition(Set, Set)</a></td><td>
            Adds two scalars that are implicitly created from the sets, and returns the resulting scalar.
            </td></tr><tr><td><a href="e8cd1dba-5f7e-96b1-7469-09e40ea06951.htm">Addition(Set, Double)</a></td><td>
            Adds two scalars one of which is implicitly created from a set, and returns the resulting scalar.
            </td></tr><tr><td><a href="d7ac9325-44d0-0da8-48d3-286291810e8e.htm">Division(Double, Set)</a></td><td>
            Divides one scalar by another scalar, one of which is implicitly created from a set, and returns the resulting scalar.
            </td></tr><tr><td><a href="e3059211-aadc-cb1b-4ec2-6b56ca974d4d.htm">Division(Set, Set)</a></td><td>
            Divides a scalar by another which are implicitly created from the sets, and returns the resulting scalar.
            </td></tr><tr><td><a href="50a2f498-fd88-5716-13a9-66627f525d0a.htm">Division(Set, Double)</a></td><td>
            Divides one scalar by another scalar, one of which is implicitly created from a set, and returns the resulting scalar.
            </td></tr><tr><td><a href="56749479-b8ed-43a9-e4d1-a32739ee0bd6.htm">Multiply(Double, Set)</a></td><td>
            Multiplies two scalars one of which is implicitly created from a set, and returns the resulting scalar.
            </td></tr><tr><td><a href="69fd0910-9e7e-7b62-cf47-46aade6840e4.htm">Multiply(Set, Set)</a></td><td>
            Multiplies two scalars that are implicitly created from the sets, and returns the resulting scalar.
            </td></tr><tr><td><a href="87d437c4-365f-be52-d233-182ad7317577.htm">Multiply(Set, Double)</a></td><td>
            Multiplies two scalars one of which is implicitly created from a set, and returns the resulting scalar.
            </td></tr><tr><td><a href="09fb09be-5f1c-7c67-f2f1-99f6d30f2820.htm">Subtraction(Double, Set)</a></td><td>
            Subtracts one scalar from another scalar, one of which is implicitly created from a set, and returns the resulting scalar.
            </td></tr><tr><td><a href="7b257bb9-7f84-be78-1537-35f39e6e83cb.htm">Subtraction(Set, Set)</a></td><td>
            Substracts a scalar from another which are implicitly created from the sets, and returns the resulting scalar.
            </td></tr><tr><td><a href="761eb321-38bb-2bbe-8a7a-39f47a7761a4.htm">Subtraction(Set, Double)</a></td><td>
            Subtracts one scalar from another scalar, one of which is implicitly created from a set, and returns the resulting scalar.
            </td></tr><tr><td><a href="b77fd59b-bdde-e4d1-ef99-441515b925a7.htm">UnaryNegation(Set)</a></td><td>
            Implicitly converts the set to a scalar which will take its value lazily; and negates the scalar.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Fields</h2><div id="IDAEASection"><table id="FieldList" class="table is-hoverable"><tr><td><a href="4877d19e-8394-6ced-976f-7c0384bb8e9b.htm">Definition</a></td><td>
            Definition of the set.
            </td></tr><tr><td><a href="feaefae9-8adf-3a4c-61ae-ec9fe3357894.htm">GeneratorDefinition</a></td><td>
            Definition of the function that generates the set's elements.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="b58113de-60d8-4f5d-76d7-a9e96ffb2213.htm">Orx.MathProg Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Properties</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">Operators</a></li><li><a class="quickLink">Fields</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column">https://github.com/orxfun/orx-mathprog-gallery<div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:orx.ugur.arikan%40gmail.com?Subject=Orx.MathProg%20(C#)">orx.ugur.arikan@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>