<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Orx.MathProg Namespace</title><meta name="Title" content="Orx.MathProg" /><meta name="Help.Id" content="N:Orx.MathProg" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Orx.MathProg" /><meta name="guid" content="b58113de-60d8-4f5d-76d7-a9e96ffb2213" /><meta name="tocFile" content="../toc/Root.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Orx.MathProg (C#)</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Orx.<wbr />Math<wbr />Prog Namespace</h1><div class="summary"> </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Classes</h2><div id="IDSCASection"><table id="classList" class="table is-hoverable"><tr><td><a href="35c8f28b-edc9-12a4-bf3b-58b92a0d776d.htm">Constraint</a></td><td>
            Constraint of a mathematical model.
            </td></tr><tr><td><a href="7f516644-7b7f-11ea-a2b7-3201dd4bbe72.htm">ConstraintExpr</a></td><td>
            A constraint expression which is composed of three parts:
            <ul><li>lhs: a linear mathematical expression</li><li>relation: &lt;= or &gt;= or ==</li><li>rhs: a linear mathematical expression</li></ul></td></tr><tr><td><a href="2b29071b-1766-dc60-726c-503919e1941a.htm">ForAllSets</a></td><td>
            Forall sets expression of a constraint defining its expansion.
            
            <p>Consider for instance the following big-m constraint.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Constraint xyRelation =
    key("x-y relation")
    | "capacity of a location can be used only if it is opened"
    | forall(p)
    | x[p] &lt;= M * y[p];</code></pre></div></div>
            
            where "p" is a set defining the potential locations.
            This constraint will be generated for each element of the set "p"; i.e., for each potential location.
            </td></tr><tr><td><a href="08f927b4-b298-eb5c-8a5b-2122d2553867.htm">MathExpr</a></td><td>
            A linear mathematical expression.
            </td></tr><tr><td><a href="56e661b0-151b-8028-b934-5d374002f765.htm">MathModel</a></td><td>
            A methematical model, which is composed of:
            <ul><li>a set of constraints, and</li></ul><p>Below is a complete definition of a multi commodity minimum cost network flow problem on an adjacency graph.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// sets
Set j = Set("j").Represents("a node of the network").HasElementsUntil(data.NumNodes);
Set i = Set("i").Represents("nodes which have an edge into node j").DependsOn(j).HasElements(j =&gt; data.TailsOf(j));
Set k = Set("k").Represents("nodes which have an edge from node j").DependsOn(j).HasElements(j =&gt; data.HeadsOf(j));
Set c = Set("c").Represents("a commodity to be transported").HasElementsUntil(data.NumCommodities);

// parameters
ParD2 capacity = Parameter("cap").Represents("capacity of arc (j,k)").HasIndices(j, k).HasValues(data.GetEdgeCapacity);
ParD2 nodeBalance = Parameter("b").Represents("equal to (negative of) demand of commodity c if j is its (source) sink node").HasIndices(c, j).HasValues(data.GetNodeBalance);
ParD3 cost = Parameter("cost").Represents("cost of unit flow of commodity c on arc (j, k)").HasIndices(j, k, c).HasValues(1);

// variables
VarD3 f = Variable("f").Represents("flow of commodity c on arc (j,k)").HasIndices(j, k, c).IsContinuous().IsNonnegative();

// constraints
Constraint conFlowBal = key("flowBal")
    | "flow balance constraint at node j"
    | forall(j)
    | sum(over(c, i), f[i, j, c]) - sum(over(c, k), f[j, k, c]) == nodeBalance[c, j];

Constraint conCapacity = key("capacity")
    | "capacity constraint of arc (j, k)"
    | forall(j, k)
    | sum(over(c), f[j, k, c]) &lt;= capacity[j, k]; 

// objective
Objective totalCost = key("minFlowCost")
    | "minimize total flow cost"
    | minimize
    | sum(over(c, j, k), cost[j, k, c] * f[j, k, c]);

// mathematical model
var model =
    MathModel.New("multi-commodity mcnf problem")
    .Represents("multi commodity minimum cost network flow problem")
    .WithObjective(totalCost)
    .HasConstraints(conFlowBal, conCapacity);</code></pre></div></div></td></tr><tr><td><a href="392402f0-d1a1-79d7-560e-52c6b77bcfce.htm">MathProgExtensions</a></td><td>
            Necessary extensions methods for enabling mathematical programming.
            </td></tr><tr><td><a href="8d2698fc-be50-f5d1-ec0a-591ee3f97188.htm">Objective</a></td><td>
            An objective function of a mathematical program.
            It is composed of two parts:
            <ul><li>a linear mathematical expression, and</li><li>a direction (minimize or maximize).</li></ul>
            
            The following are some examples of objective functions:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// i, j: nodes
// x[i, j]: arc flow variable
// cost[i, j]: unit flow cost on arc (i,j)
// fixedCost[i]: fixed cost of including node i in the network
Objective minFlowCost = minimize | sum(over(i, j), cost[i, j] * x[i, j]);
Objective minTotalCost = minimize | sum(over(i, j), cost[i, j] * x[i, j]) + sum(over(i), fixedCost[i] * y[i]);

// p: person; t: task
// utility[p, t]: utility of person p when assigned to task t
// fitness[p, t]: fitness of person p's skills to task t
// revenue[t]: revenue of completing task t
// x[p, t]: 1 if person p is assigned to task t; 0 o/w
MathExpr totalUtility = sum(over(p, t), utility[p, t] * x[p, t]);
MathExpr totalFitness = sum(over(p, t), fitness[p, t] * x[p, t]);
MathExpr totalRevenue = sum(over(p, t), revenue[t] * x[p, t]);

double weightUtility = 0.40;
double weightFitness = 0.35;
double weightRevenue = 0.25;

Objective weighted = maximize
                    | weightUtility * totalUtility + weightFitness * totalFitness + weightRevenue * totalRevenue</code></pre></div></div></td></tr><tr><td><a href="af89ed43-38d2-dd63-2b1a-f97cd6741206.htm">ParD0</a></td><td>
            A 0-dimensional (scalar) parameter symbol.
            
            <p>
            Parameters represents constants for the mathematical model,
            values of which can lazily be evaluated.
            </p></td></tr><tr><td><a href="e4348208-fd7f-b6a1-98bd-c33521647646.htm">ParD1</a></td><td>
            A 1-dimensional (array) parameter symbol.
            
            <p>
            Parameters represents constants for the mathematical model,
            values of which can lazily be evaluated.
            </p></td></tr><tr><td><a href="6915174e-9e72-a17c-24b5-b175f52d09f1.htm">ParD2</a></td><td>
            A 2-dimensional (array) parameter symbol, having two indices.
            
            <p>
            Parameters represents constants for the mathematical model,
            values of which can lazily be evaluated.
            </p></td></tr><tr><td><a href="4993377b-9479-9dea-bebc-cd0a1c09fbc0.htm">ParD3</a></td><td>
            A 3-dimensional (array) parameter symbol, having three indices.
            
            <p>
            Parameters represents constants for the mathematical model,
            values of which can lazily be evaluated.
            </p></td></tr><tr><td><a href="0e70fb3e-4475-eeaf-b176-3929719f4459.htm">ParD4</a></td><td>
            A 4-dimensional (array) parameter symbol, having three indices.
            
            <p>
            Parameters represents constants for the mathematical model,
            values of which can lazily be evaluated.
            </p></td></tr><tr><td><a href="2bddf190-1c2c-d994-6e06-23708037f912.htm">Sca</a></td><td>
            A scalar with a constant value in the mathematical programming sense.
            In other words, its value is known to the mathematical program; although its value might be lazily evaluated from an expression including sets or parameters.
            
            <p>Below is a list of example scalars.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Sca s = 42;
Sca s = 4.2;
Sca s = i; // where i is a <see cref="T:Orx.MathProg.Set" />.
Sca s = 2 * i;
Sca s = M; // where M is a <see cref="T:Orx.MathProg.ParD0" />.
Sca s = demand[i]; // where demand is a <see cref="T:Orx.MathProg.ParD1" />.
Sca s = (i * demand[i] + 2) / density[i]; // where density also is a <see cref="T:Orx.MathProg.ParD1" />.</code></pre></div></div></td></tr><tr><td><a href="e26c1ac6-aca2-9af1-2a70-cdfb5412a96d.htm">Set</a></td><td>
            A set / index to be used in constraints' forall expressions, summations' sum over expressions and finally as indices of variables and parameters having a dimension &gt;= 1.
            
            <p>
            A set is constructed using builder pattern that can be initiated by <a href="0385e888-c935-c43d-7bc2-17474ce2a504.htm">Set(String)</a> function.
            The following example demonstrates construction of sets.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Set j = Set("j").Represents("Nodes of the network.").HasElementsUntil(data.NumNodes);
Set i = Set("i").Represents("Tails of edges incoming to j").DependsOn(j).HasElements(data.TailsOf);
Set k = Set("k").Represents("Heads of edges outgoing from j").DependsOn(j).HasElements(data.HeadsOf);

// or definitions can be omitted; however, they might be useful in automatically generated LaTex, html or text documentations.
Set j = Set("j").HasElementsUntil(data.NumNodes);
Set i = Set("i").DependsOn(j).HasElements(data.TailsOf);
Set k = Set("k").DependsOn(j).HasElements(data.HeadsOf);</code></pre></div></div><p>The following flow balance constraint demonstrates the usage of the sets.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Set i = ...;
Set j = ...;
VarD2 x = ...; // arc flow variable
ParD1 supply = ...; // parameter representing the supply at each node

Constraint flowBal = forall(i)
                    | sum(over(j), x[i, j]) == sum(over(j), x[j, i]) + supply[i];</code></pre></div></div>
            
            Here, the sets i and j have the following functionalities:
            <ul><li>
            forall(i):
            Used in constraint's forall expression to define the set of constraints to be created; a constraint will be created for every value of i.
            </li><li>
            over(j):
            Used in summation's sum-over expression to define the expressions to be summed; an expression will be created for every value of j.
            </li><li>
            x[i, j]:
            Used to represent the scalar variable from the two-dimensional variable symbol x.
            Note that x is of type <a href="e5855b03-aa28-38d9-75eb-04f403331b7a.htm">VarD2</a> and requires two indices to scalarize.
            It is also possible to use expressions as indices such as "x[0, 0]", "x[i + j, 0]", "x[i, i]", etc.
            The values of the sets are lazy and are replaced by the value generated either by a summation's sum-over sets expression or by a constraint's forall sets expression.
            Here, value of i will be set by "forall(i)" expression of the constraint and j will be set by "over(j)" expression of the summation.
            </li><li>
            demand[i]:
            Similar to the scalarization of the variable; here the set i is used as the scalarization of "supply" which is of type <a href="e4348208-fd7f-b6a1-98bd-c33521647646.htm">ParD1</a>.
            </li></ul></td></tr><tr><td><a href="0c782c79-aca4-5889-15c8-c63288a19075.htm">Summation</a></td><td>
            Summation of a linear mathematical expression over a set of indices.
            
            <p>Some examples are as follows:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">sum(over(i),       y[i])
sum(over(j),       x[i, j])
sum(over(i, j),    cost[i, j] * x[i, j])
sum(over(i, j, c), cost[i, j] * x[i, j, c] + fixed[c] * y[i, j, c])</code></pre></div></div>
            
            Summation indices are checked in constructor, and proper errors are provided.
            The following summation, for instance, leads to an exception due to set k in sum-over expression being unused in the summation expression.
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">sum(over(i, k), y[i])</code></pre></div></div></td></tr><tr><td><a href="af8a1d71-a9f5-d27c-44c6-4b308703c9a2.htm">SumOverSets</a></td><td>
            Sets to sum over a linear mathematical expression.
            </td></tr><tr><td><a href="8f62d8c1-7282-ef6c-db43-b40d1ed3fe6e.htm">Term</a></td><td>
            A linear mathematical term in the form of '<a href="2bddf190-1c2c-d994-6e06-23708037f912.htm">Sca</a> · <a href="bab621d9-221d-7d9b-1acd-b7525bf8068f.htm">Var</a>'. For instance:
            <ul><li><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">2 * totalCost</code></pre></div></div>
            is a term where totalCost is of type <a href="16abb95a-df22-05c0-304a-cc86c1ccd98c.htm">VarD0</a>.
            </li><li><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">cost[i, j] * x[i, j]</code></pre></div></div>
            is a term where cost is of type <a href="6915174e-9e72-a17c-24b5-b175f52d09f1.htm">ParD2</a> and x is of type <a href="e5855b03-aa28-38d9-75eb-04f403331b7a.htm">VarD2</a>.
            Note that, given i and j are <a href="e26c1ac6-aca2-9af1-2a70-cdfb5412a96d.htm">Set</a>s; x[i, j] is a <a href="bab621d9-221d-7d9b-1acd-b7525bf8068f.htm">Var</a> and cost[i, j] is a <a href="2bddf190-1c2c-d994-6e06-23708037f912.htm">Sca</a>.
            </li><li><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">2 * cost[i, j] / (1 + demand[i]) * y[j]</code></pre></div></div>
            is also a term.
            The scalar; i.e., the coefficient can be expressed as mathematical operations.
            Note that the order is not strict as long as linearity is satisfied.
            Above term for instance could also be expressed as:
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">2 * cost[i, j] * y[j] / (1 + demand[i])</code></pre></div></div></li></ul></td></tr><tr><td><a href="bab621d9-221d-7d9b-1acd-b7525bf8068f.htm">Var</a></td><td>
            A scalar decision variable. For example:
            <ul><li>totalCost which is of type <a href="16abb95a-df22-05c0-304a-cc86c1ccd98c.htm">VarD0</a> is also a <a href="bab621d9-221d-7d9b-1acd-b7525bf8068f.htm">Var</a>;</li><li>y[i] representing whether or not item i is added to the knapsack is a <a href="bab621d9-221d-7d9b-1acd-b7525bf8068f.htm">Var</a> where y is of type <a href="33bb4b03-8e33-08aa-930d-5328c6b7b7c1.htm">VarD1</a>;</li><li>x[i, j] representing the amount of flow on arc (i,j) is a <a href="bab621d9-221d-7d9b-1acd-b7525bf8068f.htm">Var</a> where x is of type <a href="e5855b03-aa28-38d9-75eb-04f403331b7a.htm">VarD2</a>.</li></ul></td></tr><tr><td><a href="16abb95a-df22-05c0-304a-cc86c1ccd98c.htm">VarD0</a></td><td>
            A 0-dimensional (scalar) variable symbol.
            </td></tr><tr><td><a href="33bb4b03-8e33-08aa-930d-5328c6b7b7c1.htm">VarD1</a></td><td>
            A 1-dimensional (array) variable symbol.
            </td></tr><tr><td><a href="e5855b03-aa28-38d9-75eb-04f403331b7a.htm">VarD2</a></td><td>
            A 2-dimensional variable symbol, having two indices.
            </td></tr><tr><td><a href="7c186f1b-554a-45d7-3a0e-e31ac57dd66e.htm">VarD3</a></td><td>
            A 3-dimensional variable symbol, having three indices.
            </td></tr><tr><td><a href="61c87635-6fa7-0ca4-324a-ccaa2c13aa0b.htm">VarD4</a></td><td>
            A 4-dimensional variable symbol, having three indices.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Structures</h2><div id="IDACASection"><table id="structureList" class="table is-hoverable"><tr><td><a href="65d7ce27-3f99-f500-a4be-80d5603f59e1.htm">BoundsD0</a></td><td>
            Bounds of a 0-dimensional variable, <a href="16abb95a-df22-05c0-304a-cc86c1ccd98c.htm">VarD0</a>.
            </td></tr><tr><td><a href="9f46fc9d-aa9c-3433-4149-bf0e910235cf.htm">BoundsD1</a></td><td>
            Bounds of a 1-dimensional variable, <a href="33bb4b03-8e33-08aa-930d-5328c6b7b7c1.htm">VarD1</a>.
            </td></tr><tr><td><a href="a80f07b4-440e-c34b-c677-dcac023281af.htm">BoundsD2</a></td><td>
            Bounds of a 2-dimensional variable, <a href="e5855b03-aa28-38d9-75eb-04f403331b7a.htm">VarD2</a>.
            </td></tr><tr><td><a href="0bc69cae-d889-ca0e-30f9-80275bab7d79.htm">BoundsD3</a></td><td>
            Bounds of a 3-dimensional variable, <a href="7c186f1b-554a-45d7-3a0e-e31ac57dd66e.htm">VarD3</a>.
            </td></tr><tr><td><a href="2f11c185-57a2-da3b-aca9-df8ae32663a0.htm">BoundsD4</a></td><td>
            Bounds of a 4-dimensional variable, <a href="61c87635-6fa7-0ca4-324a-ccaa2c13aa0b.htm">VarD4</a>.
            </td></tr><tr><td><a href="7c78f3f3-e4df-a5a9-426a-45939b2f296d.htm">ConstrKeyDefnForall</a></td><td>
            Constraint builder state containing key, definition and forall expression.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="aef8783b-f59d-635a-c205-6ace274944eb.htm">Dimension0</a></td><td>
            Zero-dimensional, scalar.
            </td></tr><tr><td><a href="2bafc595-60bb-2f8e-4310-ffe0bb005795.htm">Dimension1</a></td><td>
            One-dimensional, vector.
            </td></tr><tr><td><a href="0c86e409-7601-c5c2-ca29-3c9c681a6ad3.htm">Dimension2</a></td><td>
            Two-dimensional.
            </td></tr><tr><td><a href="a6e5be99-8298-3c73-636a-18edef4b2390.htm">Dimension3</a></td><td>
            Three-dimensional.
            </td></tr><tr><td><a href="f35cf021-6611-e17b-2a8b-948e7fa4ebca.htm">Dimension4</a></td><td>
            Four-dimensional.
            </td></tr><tr><td><a href="fb586fc9-55cf-c913-08e5-c263d716022c.htm">Direction</a></td><td>
            Objective function builder state containing objective direction information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="5f478ddd-7fa0-66a6-3798-51d0e9d3c603.htm">ModelBuilderDefinition</a></td><td>
            Mathematical model builder containing key and definition information.
            </td></tr><tr><td><a href="f474d267-3ecd-03ae-e518-ea184aae1444.htm">ModelBuilderKey</a></td><td>
            Mathematical model builder containing key information.
            </td></tr><tr><td><a href="889987b5-90c1-5900-86a3-e1d2688499e6.htm">ModelBuilderObjective</a></td><td>
            Mathematical model builder containing key, definition and objective information.
            </td></tr><tr><td><a href="ba22849e-53e0-c98d-c812-8b3a80ca5f94.htm">ObjKeyDefnDir</a></td><td>
            Objective function builder state containing key and objective direction information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="3b3bf897-4e4a-5d82-698a-616d7183e04f.htm">ObjOrConstrKeyDefn</a></td><td>
            Objective function or constraint builder state containing key and definition information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="ffb691da-ddd3-d1b1-692b-6e57e268e8de.htm">ParameterBuilderDefinition</a></td><td>
            Parameter builder containing key and definition information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="aaf0a517-c26a-2672-80a7-561c76d2364e.htm">ParameterBuilderIndices<span id="LST3E13F691_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>Dim<span id="LST3E13F691_1" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Parameter builder containing key, definition and indices information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="7e78655b-60bf-1408-a0cf-66d919062858.htm">ParameterBuilderKey</a></td><td>
            Parameter builder containing key information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="cb8316e4-49e7-ebcb-4611-ff62b0ed13d6.htm">SetBuilderDefinition</a></td><td>
            Set builder containing set key and definition information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="f3d26520-8710-e4e9-85f8-0d541939ff88.htm">SetBuilderDepends<span id="LST3E13F691_2" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>Dim<span id="LST3E13F691_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Set builder containing set key, definition and dependent sets information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="7edaa096-bcdb-a9b2-7172-01d390202130.htm">SetBuilderKey</a></td><td>
            Set builder containing set key information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="109d810a-c03b-5c17-c60d-09290cb3e607.htm">SymbolKey</a></td><td>
            Key of a mathematical programming symbol.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="6dc4bc3a-3c86-efbf-c668-8e9231ffc5cf.htm">VariableBuilderDefinition</a></td><td>
            Variable builder containing key and definition information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="17842a1c-fef2-d1e1-60ca-72c3be7ba4ac.htm">VariableBuilderIndices<span id="LST3E13F691_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>Dim<span id="LST3E13F691_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Variable builder containing key, definition and indices information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="cdfdde5f-572b-7656-d2cc-3134f3d8c229.htm">VariableBuilderKey</a></td><td>
            Variable builder containing key information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr><tr><td><a href="39a33970-9e97-6bfb-c1d9-ff0eb83e5b80.htm">VariableBuilderType<span id="LST3E13F691_6" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'"></span>Dim<span id="LST3E13F691_7" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;"></span></a></td><td>
            Variable builder containing key, definition, indices and type information.
            <br /><span class="tag is-danger">Obsolete.</span></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Interfaces</h2><div id="IDFCASection"><table id="interfaceList" class="table is-hoverable"><tr><td><a href="2918e783-6655-c6c1-1866-1bc885333bea.htm">IDimension</a></td><td>
            Marker interface for variable or parameter dimensions.
            </td></tr><tr><td><a href="56251b37-c62e-ebb1-e711-bb197ebe3fba.htm">ISolver</a></td><td>
            Marker interface for solvers.
            </td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Enumerations</h2><div id="ID6CASection"><table id="enumerationList" class="table is-hoverable"><tr><td><a href="9c126464-788d-94c6-f6b5-a101513834f7.htm">BoundsType</a></td><td>
            Type of variable bounds.
            </td></tr><tr><td><a href="6036a27d-cf66-4430-7ca4-7367810a60bd.htm">ConstraintRelation</a></td><td>
            Constraint relation.
            </td></tr><tr><td><a href="a78ea901-113f-dc76-5978-408ca4d840c4.htm">ObjectiveDirection</a></td><td>
            Objective function direction: minimize or maximize.
            </td></tr><tr><td><a href="57b5d714-441c-585f-c22c-7994bf5c1abe.htm">VariableType</a></td><td>
            Variable type.
            </td></tr></table></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Classes</a></li><li><a class="quickLink">Structures</a></li><li><a class="quickLink">Interfaces</a></li><li><a class="quickLink">Enumerations</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column">https://github.com/orxfun/orx-mathprog-gallery<div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:orx.ugur.arikan%40gmail.com?Subject=Orx.MathProg%20(C#)">orx.ugur.arikan@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>