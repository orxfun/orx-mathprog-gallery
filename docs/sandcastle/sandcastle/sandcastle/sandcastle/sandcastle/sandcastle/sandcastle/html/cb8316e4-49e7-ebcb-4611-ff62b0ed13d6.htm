<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>SetBuilderDefinition Structure</title><meta name="Title" content="SetBuilderDefinition" /><meta name="Help.Id" content="T:Orx.MathProg.SetBuilderDefinition" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Orx.MathProg" /><meta name="guid" content="cb8316e4-49e7-ebcb-4611-ff62b0ed13d6" /><meta name="Description" content="Set builder containing set key and definition information." /><meta name="tocFile" content="../toc/IDA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Orx.MathProg (C#)</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Set<wbr />Builder<wbr />Definition Structure</h1><div id="TopicNotices"><span class="tags"><span class="tag is-danger is-medium">Note: This API is now obsolete.</span></span></div><div class="summary">
            Set builder containing set key and definition information.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="b58113de-60d8-4f5d-76d7-a9e96ffb2213.htm">Orx.MathProg</a><br /><strong>Assembly:</strong> Orx.MathProg (in Orx.MathProg.dll) Version: 1.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">readonly</span> <span class="keyword">struct</span> <span class="identifier">SetBuilderDefinition</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">SetBuilderDefinition</span></dd></dl></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Methods</h2><div id="IDCEASection"><table id="MethodList" class="table is-hoverable"><tr><td><a href="24e4fd18-e381-d907-5b7a-6d8e680a7bac.htm">DependsOn(Set)</a></td><td>
    
            Adds a dependent set to the set definition.
            
            <p>
            Consider the following example.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int numNodes = 4;
List&lt;(int, int)&gt; edges = new()
{
    (0, 1),
    (0, 2),
    (1, 2),
    (1, 3),
    (2, 3),
};
IEnumerable&lt;int&gt; getHeads(int i)
    =&gt; edges.Where(e =&gt; e.Item1 == i).Select(x =&gt; x.Item2);

Set i = Set("i").Represents("nodes").HasElementsUntil(numNodes);
Set j = Set("j").Represents("nodes having an arc from node i").DependsOn(i).HasElements(getHeads);</code></pre></div></div><p>
            Here, set i has indices { 0, 1, 2, 3 }.
            </p><p>
            Set j, on the other hand, depends on set i.
            In other words, it will generate different elements for different values of i:
            </p><ul><li>when i takes value 0; j has elements { 1, 2 },</li><li>when i takes value 1; j has elements { 2, 3 },</li><li>when i takes value 2; j has elements { 3 }, and</li><li>when i takes value 3; j is empty set.</li></ul></td></tr><tr><td><a href="370dac2f-3658-7b86-e240-1eb88475b05b.htm">DependsOn(Set, Set)</a></td><td>
    
            Adds dependent sets to the set definition.
            
            <p>
            Consider the following example.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int numNodes = 4;
List&lt;(int, int)&gt; edges = new()
{
    (0, 1),
    (0, 2),
    (1, 2),
    (1, 3),
    (2, 3),
};
IEnumerable&lt;int&gt; getHeads(int i)
    =&gt; edges.Where(e =&gt; e.Item1 == i).Select(x =&gt; x.Item2);

Set i = Set("i").Represents("nodes").HasElementsUntil(numNodes);
Set j = Set("j").Represents("nodes having an arc from node i").DependsOn(i).HasElements(getHeads);</code></pre></div></div><p>
            Here, set i has indices { 0, 1, 2, 3 }.
            </p><p>
            Set j, on the other hand, depends on set i.
            In other words, it will generate different elements for different values of i:
            </p><ul><li>when i takes value 0; j has elements { 1, 2 },</li><li>when i takes value 1; j has elements { 2, 3 },</li><li>when i takes value 2; j has elements { 3 }, and</li><li>when i takes value 3; j is empty set.</li></ul></td></tr><tr><td><a href="f3c3c9fa-c0e3-a9f3-11ca-820d3a6c47d7.htm">DependsOn(Set, Set, Set)</a></td><td>
    
            Adds dependent sets to the set definition.
            
            <p>
            Consider the following example for two dependent set example.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int numNodes = 4;
List&lt;(int, int)&gt; edges = new()
{
    (0, 1),
    (0, 2),
    (1, 2),
    (1, 3),
    (2, 3),
};
IEnumerable&lt;int&gt; getHeads(int i)
    =&gt; edges.Where(e =&gt; e.Item1 == i).Select(x =&gt; x.Item2);

Set i = Set("i").Represents("nodes").HasElementsUntil(numNodes);
Set j = Set("j").Represents("nodes having an arc from node i").DependsOn(i).HasElements(getHeads);</code></pre></div></div><p>
            Here, set i has indices { 0, 1, 2, 3 }.
            </p><p>
            Set j, on the other hand, depends on set i.
            In other words, it will generate different elements for different values of i:
            </p><ul><li>when i takes value 0; j has elements { 1, 2 },</li><li>when i takes value 1; j has elements { 2, 3 },</li><li>when i takes value 2; j has elements { 3 }, and</li><li>when i takes value 3; j is empty set.</li></ul></td></tr><tr><td><a href="cab7188b-5a39-de2d-b26d-5e6836df4036.htm">DependsOn(Set, Set, Set, Set)</a></td><td>
    
            Adds dependent sets to the set definition.
            
            <p>
            Consider the following example for two dependent set example.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int numNodes = 4;
List&lt;(int, int)&gt; edges = new()
{
    (0, 1),
    (0, 2),
    (1, 2),
    (1, 3),
    (2, 3),
};
IEnumerable&lt;int&gt; getHeads(int i)
    =&gt; edges.Where(e =&gt; e.Item1 == i).Select(x =&gt; x.Item2);

Set i = Set("i").Represents("nodes").HasElementsUntil(numNodes);
Set j = Set("j").Represents("nodes having an arc from node i").DependsOn(i).HasElements(getHeads);</code></pre></div></div><p>
            Here, set i has indices { 0, 1, 2, 3 }.
            </p><p>
            Set j, on the other hand, depends on set i.
            In other words, it will generate different elements for different values of i:
            </p><ul><li>when i takes value 0; j has elements { 1, 2 },</li><li>when i takes value 1; j has elements { 2, 3 },</li><li>when i takes value 2; j has elements { 3 }, and</li><li>when i takes value 3; j is empty set.</li></ul></td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.equals#system-valuetype-equals(system-object)" target="_blank" rel="noopener noreferrer">Equals</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.gethashcode#system-valuetype-gethashcode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.object.gettype#system-object-gettype" target="_blank" rel="noopener noreferrer">GetType</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><a href="62f0a0ef-5245-4534-6d6c-3722d35f0949.htm">HasElements(Func<span id="LST901054A1_0" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>IEnumerable<span id="LST901054A1_1" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST901054A1_2" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span><span id="LST901054A1_3" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String)</a></td><td>
    
            Finalizes the set builder and returns the resulting set.
            
            <p>
            The set generates elements by the function <span class="parameter">getIndices</span>.
            </p><p>
            For instance, the following set:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">IEnumerable&lt;int&gt; GetHighPriorityIndices() =&gt; new int[] { 1, 4, 9 };
Set p = Set("p").Represents("prioritized projects").HasElements(GetHighPriorityIndices);</code></pre></div></div>
            has elements { 1, 4, 9 }.
            
  </td></tr><tr><td><a href="2496888a-c447-d49f-96a1-c1626f5c415b.htm">HasElements(IEnumerable<span id="LST901054A1_4" data-languageSpecificText="cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=("></span>Int32<span id="LST901054A1_5" data-languageSpecificText="cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)"></span>, String)</a></td><td>
    
            Finalizes the set builder and returns the resulting set.
            
            <p>
            The set generates elements in [<span class="parameter">start</span>, <span class="parameter">untilExclusive</span>).
            </p><p>
            For instance, the following set:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Set i = Set("i").Represents("resources").HasElementsIn(1, 4);</code></pre></div></div>
            has elements { 1, 2, 3 }.
            
  </td></tr><tr><td><a href="f5ed812d-e4ab-6997-194e-f11cefeceb9a.htm">HasElementsIn</a></td><td>
    
            Finalizes the set builder and returns the resulting set.
            
            <p>
            The set generates elements in [<span class="parameter">start</span>, <span class="parameter">untilExclusive</span>).
            </p><p>
            For instance, the following set:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Set i = Set("i").Represents("resources").HasElementsIn(1, 4);</code></pre></div></div>
            has elements { 1, 2, 3 }.
            
  </td></tr><tr><td><a href="ee062197-9f32-f16d-386b-e5ccfec849a5.htm">HasElementsUntil</a></td><td>
    
            Finalizes the set builder and returns the resulting set.
            
            <p>
            The set generates elements in [0, <span class="parameter">untilExclusive</span>).
            </p><p>
            For instance, the following set:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">int numNodes = 4;
Set i = Set("i").Represents("nodes").HasElementsUntil(numNodes);</code></pre></div></div>
            has elements { 0, 1, 2, 3 }.
            
  </td></tr><tr><td><a href="https://learn.microsoft.com/dotnet/api/system.valuetype.tostring#system-valuetype-tostring" target="_blank" rel="noopener noreferrer">ToString</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.valuetype" target="_blank" rel="noopener noreferrer">ValueType</a>)</td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="b58113de-60d8-4f5d-76d7-a9e96ffb2213.htm">Orx.MathProg Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Methods</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column">https://github.com/orxfun/orx-mathprog-gallery<div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:orx.ugur.arikan%40gmail.com?Subject=Orx.MathProg%20(C#)">orx.ugur.arikan@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>