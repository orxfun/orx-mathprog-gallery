<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>MathProgExtensions.HasElementsUntil Method</title><meta name="Title" content="HasElementsUntil" /><meta name="Help.Id" content="M:Orx.MathProg.MathProgExtensions.HasElementsUntil(Orx.MathProg.SetBuilderDepends{Orx.MathProg.Dimension1},System.Func{System.Int32,System.Int32},System.String)" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Orx.MathProg" /><meta name="guid" content="6cecb84f-59a4-73a7-f4a4-b25f7646280d" /><meta name="Description" content="Finalizes the set builder and returns the resulting set. The set generates elements in [0, (i)); where i is the value of the dependent set. For instance, consider the following sets. Set t2 = Set(&quot;t2&quot;).Represents(&quot;time periods&quot;)." /><meta name="tocFile" content="../toc/IDBVA.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Orx.MathProg (C#)</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Math<wbr />Prog<wbr />Extensions<span id="LST370C9866_0" data-languageSpecificText="cpp=::|nu=."></span>Has<wbr />Elements<wbr />Until Method</h1><div class="summary">
            Finalizes the set builder and returns the resulting set.
            
            <p>
            The set generates elements in [0, <span class="parameter">getUntil</span>(i));
            where i is the value of the dependent set.
            </p><p>
            For instance, consider the following sets.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Set t2 = Set("t2").Represents("time periods").HasElementsUntil(4);
Set t1 = Set("t1").Represents("time periods until t2").DependsOn(t2).HasElementsUntil(t1 =&gt; t1 + 1);</code></pre></div></div><p>
            Set t2 has elements { 0, 1, 2, 3 }.
            </p><p>
            Set t1 depends on t2; hence, generates different indices for different values of t2:
            </p><ul><li>when t1 = 0; t2 has elements { 0 },</li><li>when t1 = 1; t2 has elements { 0, 1 },</li><li>when t1 = 2; t2 has elements { 0, 1, 2 },</li><li>when t1 = 3; t2 has elements { 0, 1, 2, 3 }.</li></ul></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="b58113de-60d8-4f5d-76d7-a9e96ffb2213.htm">Orx.MathProg</a><br /><strong>Assembly:</strong> Orx.MathProg (in Orx.MathProg.dll) Version: 1.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">static</span> <span class="identifier">Set</span> <span class="identifier">HasElementsUntil</span>(
	<span class="keyword">this</span> <span class="identifier">SetBuilderDepends</span>&lt;<span class="identifier">Dimension1</span>&gt; <span class="parameter">state</span>,
	<span class="identifier">Func</span>&lt;<span class="identifier">int</span>, <span class="identifier">int</span>&gt; <span class="parameter">getUntil</span>,
	<span class="identifier">string</span> <span class="parameter">expression</span> = ""
)</code></pre></div></div><h4 class="quickLinkHeader">Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">state</span>  <a href="f3d26520-8710-e4e9-85f8-0d541939ff88.htm">SetBuilderDepends</a><span id="LST370C9866_1" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="2bafc595-60bb-2f8e-4310-ffe0bb005795.htm">Dimension1</a><span id="LST370C9866_2" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd>Current state of the set builder.</dd><dt class="has-text-weight-normal"><span class="parameter">getUntil</span>  <a href="https://learn.microsoft.com/dotnet/api/system.func-2" target="_blank" rel="noopener noreferrer">Func</a><span id="LST370C9866_3" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a>, <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a><span id="LST370C9866_4" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span></dt><dd>Function of the dependent set that returns the last element (exclusive) of the set.</dd><dt class="has-text-weight-normal"><span class="parameter">expression</span>  <a href="https://learn.microsoft.com/dotnet/api/system.string" target="_blank" rel="noopener noreferrer">String</a>  (Optional)</dt><dd>Element generator expression.</dd></dl><h4 class="quickLinkHeader">Return Value</h4><a href="e26c1ac6-aca2-9af1-2a70-cdfb5412a96d.htm">Set</a><br /><h4 class="quickLinkHeader">Usage Note</h4>In Visual Basic and C#, you can call this method as an instance method on any object of type <a href="f3d26520-8710-e4e9-85f8-0d541939ff88.htm">SetBuilderDepends</a><span id="LST370C9866_5" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="2bafc595-60bb-2f8e-4310-ffe0bb005795.htm">Dimension1</a><span id="LST370C9866_6" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>. When you use instance method syntax to call this method, omit the first parameter. For more information, see <a href="https://docs.microsoft.com/dotnet/visual-basic/programming-guide/language-features/procedures/extension-methods" target="_blank" rel="noopener noreferrer">Extension Methods (Visual Basic)</a> or <a href="https://docs.microsoft.com/dotnet/csharp/programming-guide/classes-and-structs/extension-methods" target="_blank" rel="noopener noreferrer">Extension Methods (C# Programming Guide)</a>.</div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="392402f0-d1a1-79d7-560e-52c6b77bcfce.htm">MathProgExtensions Class</a></div><div><a href="b58113de-60d8-4f5d-76d7-a9e96ffb2213.htm">Orx.MathProg Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a><ul class="menu"><li><a class="quickLink">Parameters</a></li><li><a class="quickLink">Return Value</a></li><li><a class="quickLink">Usage Note</a></li></ul></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column">https://github.com/orxfun/orx-mathprog-gallery<div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:orx.ugur.arikan%40gmail.com?Subject=Orx.MathProg%20(C#)">orx.ugur.arikan@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>