<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>MathModelSolution.VarIndicesAndValuesOf(VarD2) Method</title><meta name="Title" content="VarIndicesAndValuesOf(VarD2)" /><meta name="Help.Id" content="M:Orx.MathProg.Solvers.MathModelSolution.VarIndicesAndValuesOf(Orx.MathProg.VarD2)" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Orx.MathProg.Solvers" /><meta name="guid" content="1ee7d3e9-db43-149f-3d85-d3cd40b15bfa" /><meta name="Description" content="Returns Some of a map of indices to solution values of 2-dimensional variable provided that: the solution , andthe queried belongs to the solved model. Returns None otherwise. Set i = Set(&quot;i&quot;).HasElementsUntil(2); // { 0, 1 } Set j = Set(&quot;j&quot;)." /><meta name="tocFile" content="../toc/IDCBCC.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Orx.MathProg (C#)</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Math<wbr />Model<wbr />Solution<span id="LST893E7147_0" data-languageSpecificText="cpp=::|nu=."></span>Var<wbr />Indices<wbr />And<wbr />Values<wbr />Of(Var<wbr />D<wbr />2) Method</h1><div class="summary">
            Returns Some of a map of indices to solution values of 2-dimensional variable provided that:
            <ul><li>the solution <a href="26273061-9a5e-35bb-7107-2bc5209e74f9.htm">IsFeasible</a>, and</li><li>the queried <span class="parameter">var</span> belongs to the solved model.</li></ul>
            
            Returns None otherwise.
            
            <div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Set i = Set("i").HasElementsUntil(2); // { 0, 1 }
Set j = Set("j").HasElementsUntil(3); // { 0, 1, 2 }
VarD2 x = Variable("x").HasIndices(i, j).IsBinary();
Objective maxCount = maximize | sum(over(i, j), x[i, j]);
MathModel model = MathModel.New().WithObjective(maxCount).HasNoConstraints();
Cplex solver = new();
var resSolution = await solver.Solve(model);
MathModelSolution solution = resSolution.Unwrap(); // normally, check if it is 'IsOk' before unwrapping!

VarD2 y = Variable("y").HasIndices(i, j).IsBinary(); // irrelevant to the model

var maybeXSoln = solution.VarIndicesAndValuesOf(x);
Assert.True(maybeXSoln.IsSome);

Dictionary&lt;(int, int), double&gt; xSoln = maybeXSoln.Unwrap(); // a map from indices of x to the values in the solution
Assert.Equal(1, xSoln[(0, 0)]);
Assert.Equal(1, xSoln[(0, 1)]);
Assert.Equal(1, xSoln[(0, 2)]);
Assert.Equal(1, xSoln[(1, 0)]);
Assert.Equal(1, xSoln[(1, 1)]);
Assert.Equal(1, xSoln[(1, 2)]);
Assert.False(xSoln.ContainsKey((1, 3))); // x(1, 3) is not a part of the model and solution

var maybeYSoln = solution.VarIndicesAndValuesOf(y); // y is not a part of this solution
Assert.True(maybeYSoln.IsNone); // "maybeYSoln.Unwrap()" would've thrown!</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="81a0e270-4602-76e0-3bd4-d743ad0e1edf.htm">Orx.MathProg.Solvers</a><br /><strong>Assembly:</strong> Orx.MathProg (in Orx.MathProg.dll) Version: 1.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="identifier">Opt</span>&lt;<span class="identifier">Dictionary</span>&lt;(<span class="identifier">int</span> , <span class="identifier">int</span> ), <span class="identifier">double</span>&gt;&gt; <span class="identifier">VarIndicesAndValuesOf</span>(
	<span class="identifier">VarD2</span> <span class="parameter">var</span>
)</code></pre></div></div><h4 class="quickLinkHeader">Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">var</span>  <a href="e5855b03-aa28-38d9-75eb-04f403331b7a.htm">VarD2</a></dt><dd>Variable to query value of.</dd></dl><h4 class="quickLinkHeader">Return Value</h4><span class="noLink">Opt</span><span id="LST893E7147_1" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="https://learn.microsoft.com/dotnet/api/system.collections.generic.dictionary-2" target="_blank" rel="noopener noreferrer">Dictionary</a><span id="LST893E7147_2" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="https://learn.microsoft.com/dotnet/api/system.valuetuple-2" target="_blank" rel="noopener noreferrer">ValueTuple</a><span id="LST893E7147_3" data-languageSpecificText="cpp=&lt;|cs=&lt;|fs=&lt;|vb=(Of |nu=("></span><a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a>, <a href="https://learn.microsoft.com/dotnet/api/system.int32" target="_blank" rel="noopener noreferrer">Int32</a><span id="LST893E7147_4" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span>, <a href="https://learn.microsoft.com/dotnet/api/system.double" target="_blank" rel="noopener noreferrer">Double</a><span id="LST893E7147_5" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><span id="LST893E7147_6" data-languageSpecificText="cpp=&gt;|cs=&gt;|fs=&gt;|vb=)|nu=)"></span><br /></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="e7c5b5e2-5665-3068-389f-08fb689ff270.htm">MathModelSolution Class</a></div><div><a href="54308bf3-fd1e-91b5-c4b2-f231e2f20839.htm">VarIndicesAndValuesOf Overload</a></div><div><a href="81a0e270-4602-76e0-3bd4-d743ad0e1edf.htm">Orx.MathProg.Solvers Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a><ul class="menu"><li><a class="quickLink">Parameters</a></li><li><a class="quickLink">Return Value</a></li></ul></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column">https://github.com/orxfun/orx-mathprog-gallery<div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:orx.ugur.arikan%40gmail.com?Subject=Orx.MathProg%20(C#)">orx.ugur.arikan@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>