<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>MathModelError Enumeration</title><meta name="Title" content="MathModelError" /><meta name="Help.Id" content="T:Orx.MathProg.ErrorHandling.MathModelError" /><meta name="Help.ContentType" content="Reference" /><meta name="container" content="Orx.MathProg.ErrorHandling" /><meta name="guid" content="b2fc9daa-1859-0c5e-8d95-f4de66da0c5d" /><meta name="Description" content="A mathematical model error." /><meta name="tocFile" content="../toc/IDB.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Orx.MathProg (C#)</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Math<wbr />Model<wbr />Error Enumeration</h1><div class="summary">
            A mathematical model error.
            </div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Definition</h2><div id="IDBSection"><strong>Namespace:</strong> <a href="c3592f1a-23b2-69a1-41bc-65190f93ccd3.htm">Orx.MathProg.ErrorHandling</a><br /><strong>Assembly:</strong> Orx.MathProg (in Orx.MathProg.dll) Version: 1.0.0<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="identifier">MathModelError</span></code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Members</h2><div id="IDADASection"><table id="enumMemberList" class="table is-hoverable"><tr><td>UnusedSumOverSet</td><td>0</td><td>
            Error observed when a sum-over expression contains a set which is not used in the summation expression.
            <p>
            Although this is a run-time error, no model needs to be run to explore it;
            the summation constructor will already throw.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">try
{
    Set i = Set("i").HasElementsUntil(3);
    Set j = i.Alias("j");
    VarD1 y = Variable("y").HasIndices(i).IsBinary();
    var summation = sum(over(i, j), y[i]);
}
catch (MathModelException e)
{
    Assert.Equal(e.ErrorType, MathModelError.UnusedSumOverSet);
    Assert.Equal(e.Message, "Sum expression depends on sets (i); however, has the sum-over sets (i, j). Sets (j) are not used in the sum expression, which is not allowed.");
}</code></pre></div></div><p>
            Fix in in many cases would be to make sure that 'over' expression contains only the relevant sets.
            Replacing "over(i, j)" with "over(i)" fixes the error in this example.
            </p></td></tr><tr><td>UndefinedSetInConstraint</td><td>1</td><td>
            Error observed when a constraint expression depends on a set which is not included in the forall sets.
            <p>
            Although this is a run-time error, no model needs to be run to explore it;
            the constraint constructor will already throw.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">try
{
    Set i = Set("i").HasElementsUntil(3);
    Set j = Set("j").HasElementsUntil(4);
    VarD2 y = Variable("y").HasIndices(i, j).IsBinary();
    ParD1 allowed = Parameter("allowed").HasIndices(i).HasValues(new double[3] { 0, 1, 1 });
    var con = key("allow")
        | forall(i)
        | y[i, j] &lt;= allowed[i]; // error: constraint depends on j, but it is not in the forall sets
}
catch (MathModelException e)
{
    Assert.Equal(e.ErrorType, MathModelError.UndefinedSetInConstraint);
    Assert.Equal(e.Message, "Constraint allow depends on sets (i, j); however, has forall sets (i). Sets (j) that the constraint depends on are not defined.");
}</code></pre></div></div><p>
            This error is mostly observed when a relevant set is forgotten to add in the forall expression.
            Here, the constraint depends on set j but it is not provided to the constraint.
            Replacing "forall(i)" with "forall(i, j)" fixes the problem.
            </p><p>
            Of course, there might be other causes of the problem.
            It might as well due to a forgotten summation over set j, and hence, the fix might be as below:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var con = key("allow")
    | forall(i)
    | sum(over(j), y[i, j]) &lt;= allowed[i];</code></pre></div></div></td></tr><tr><td>UnusedConstraintForallSet</td><td>2</td><td>
            Error observed when a constraint expression does not depends on a set which is included in the forall sets.
            <p>
            Although this is a run-time error, no model needs to be run to explore it;
            the constraint constructor will already throw.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">try
{
    Set i = Set("i").HasElementsUntil(3);
    Set j = Set("j").HasElementsUntil(4);
    VarD2 y = Variable("y").HasIndices(i, j).IsBinary();
    ParD1 allowed = Parameter("allowed").HasIndices(i).HasValues(new double[3] { 0, 1, 1 });
    var con = key("allow")
        | forall(i, j)
        | y[i, i] &lt;= allowed[i]; // error: the constraint depends only on i, but forall expression contains i and j (!)
}
catch (MathModelException e)
{
    Assert.Equal(e.ErrorType, MathModelError.UnusedConstraintForallSet);
    Assert.Equal(e.Message, "Constraint allow depends on sets (i); however, has forall sets (i, j). Sets (j) in the forall expression are not used in the constraint, which is not allowed.");
}</code></pre></div></div><p>
            This error might be due to wrongly added set in the forall sets.
            Then, in this example, the fix would be to replace "forall(i, j)" with "forall(i)".
            </p><p>
            However, in this example it is more likely that we have forgotten to use j in the constraint expression.
            So the fix could also be as follows:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">var con = key("allow")
    | forall(i, j)
    | sum(over(j), y[i, j]) &lt;= allowed[i];</code></pre></div></div></td></tr><tr><td>MissingDependentSetInConstraintForallSet</td><td>3</td><td>
            Error observed when a constraint depends on a set which in turn depends another set;
            however, the latter is not included in the forall sets.
            
            <p>
            Although this is a run-time error, no model needs to be run to explore it;
            the constraint constructor will already throw.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">try
{
    Set i = Set("i").HasElementsUntil(3); // { 0, 1, 2 }
    Set j = Set("j").DependsOn(i).HasSameElementsExceptParent(); // { 0, 1, 2 } \ { i } -&gt; elements depend on value of i
    VarD1 x = Variable("x").HasIndices(i).IsBinary();
    ParD1 allowed = Parameter("allowed").HasIndices(i).HasValues(new double[3] { 0, 1, 1 });
    var conAllow = key("allow")
        | forall(j)                 // error: j depends on i; however, i is not provided.
        | x[j] &lt;= allowed[j];
}
catch (MathModelException e)
{
    Assert.Equal(e.ErrorType, MathModelError.MissingDependentSetInConstraintForallSet);
    Assert.Equal(e.Message, "Constraint's forall sets contain (j). Within them, the set 'j' depends on set 'i'. However, the set 'i' is not defined in the constraint; and hence, its values cannot be generated. The fix could be to add the set to constraint's forall sets.");
}</code></pre></div></div><p>
            As explained in the error message; it is not possible to generate elements of j without knowing the value of i.
            The fix to this error is often either fixing the wrongly used set (replacing "j" with "i" in this example),
            or adding the missing dependent set to the forall sets expression.
            </p></td></tr><tr><td>DuplicateForallSet</td><td>4</td><td>
            Error observed when a forall expression contains the same set more than once.
            <p>
            Although this is a run-time error, no model needs to be run to explore it;
            the constraint constructor will already throw.
            </p><p>Consider the following constraint 'link':</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">try
{
    Set i = Set("i").HasElementsUntil(3);
    VarD1 y = Variable("y").HasIndices(i).IsBinary();
    ParD1 feasible = Parameter("feas").HasIndices(i).HasValues(new double[3] { 0, 1, 1 });
    Constraint link = key("link")
        | forall(i, i) // error happens here!
        | y[i] &lt;= feasible[i];
}
catch (MathModelException e)
{
    Assert.Equal(e.ErrorType, MathModelError.DuplicateForallSet);
    Assert.Equal(e.Message, "ForAllSets cannot contain any duplicates. However, set i is repeated. If it is necessary to have repeated sets, you may use Alias method of the set.");
}</code></pre></div></div><p>
            It is not clear for the model which i in the forall sets refers to which i in the expression,
            so this is not a valid constraint.
            </p><p>
            In this example replacing the forall expression with "forall(i)" fixes the problem.
            Then, it is clear that both "i"s in the expression are referring to the same value.
            </p><p>
            However, if the intended constraint is the other way around, <a href="91150136-5a3d-4bea-8227-47a874814de4.htm">Alias(String)</a> method might be the solution,
            as hinted in the error message.
            This example is illustrated below:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Set i = Set("i").HasElementsUntil(3);
Set j = i.Alias("j"); // "Set j = Set("j").HasElementsUntil(3);" would also work here; however, Alias is more explicit
ParD1 feasible = Parameter("feas").HasIndices(i).HasValues(new double[3] { 0, 1, 1 });
Constraint link = key("link")
    | forall(i, j)
    | y[i] &lt;= feasible[j]; // valid constraint.</code></pre></div></div></td></tr><tr><td>InvalidOrderOfForallSets</td><td>5</td><td>
            Error observed when a forall expression a set before another set that depends on it.
            
            <p>
            Although this is a run-time error, no model needs to be run to explore it;
            the constraint constructor will already throw.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">try
{
    Set i = Set("i").HasElementsUntil(3); // { 0, 1, 2 }
    Set j = Set("j").DependsOn(i).HasSameElementsExceptParent(); // { 0, 1, 2 } \ { i } -&gt; elements depend on value of i
    VarD2 y = Variable("y").HasIndices(i, j).IsBinary();
    ParD1 allowed = Parameter("allowed").HasIndices(i).HasValues(new double[3] { 0, 1, 1 });
    var conAllow = key("allow")
        | forall(j, i)
        | y[i, j] &lt;= allowed[i];
}
catch (MathModelException e)
{
    Assert.Equal(e.ErrorType, MathModelError.InvalidOrderOfForallSets);
    Assert.Equal(e.Message, "Constraint's forall sets contain (j, i). Within them, the set 'j' depends on set 'i'. However, the set 'i' is added before 'j' in the forall sets expression. The most independent set must be added to the leftmost of forall sets. The fix could be to replace their positions.");
}</code></pre></div></div><p>
            As indicated in the error message, the fix is often to replace the order.
            In this example, changing "forall(j, i)" to "forall(i, j)" fixes the problem.
            </p></td></tr><tr><td>UndefinedSetInObjective</td><td>6</td><td>
            Error observed when an objective function depends on a set which is not internal to a summation.
            Note that a constraint might depend on a set which is included in forall-expression;
            however, an objective function must not have any outer dependency.
            
            <p>
            Although this is a run-time error, no model needs to be run to explore it;
            the objective function constructor will already throw.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">try
{
    Set i = Set("i").HasElementsUntil(3);
    Set j = Set("j").HasElementsUntil(4);
    VarD2 y = Variable("y").HasIndices(i, j).IsBinary();
    Objective maxCount = maximize | sum(over(i), y[i, j]);
    maxCount.LogToConsole();
}
catch (MathModelException e)
{
    Assert.Equal(e.ErrorType, MathModelError.UndefinedSetInObjective);
    Assert.Equal(e.Message, "Objective '∑ { i | y[i,j] }' depends on sets (j) which are not handled (outside sum expressions or not handled in sum's forall sets). Objective functions cannot have dependency to an external set index.");
}</code></pre></div></div><p>
            As described in the error message; set j is not known to the objective function.
            In many cases as in this example, the problem might be due to a forgotten set in a sum-over expression.
            See below the fixed objective:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Objective maxCount = maximize | sum(over(i, j), y[i, j]);</code></pre></div></div></td></tr><tr><td>SolverNotFound</td><td>7</td><td>
            Error observed when a solver's binaries cannot be found either in the path environment variable or in the provided absolute path.
            
            <p>
            Although this is a run-time error, no model needs to be run to explore it;
            availability of the solver on the host machine can be tested using <a href="8bdb3dc9-1224-3a8e-1194-984426b6bf6a.htm">CheckAvailability<span id="LST6A26AB60_0" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> method.
            </p><p>
            Consider the following model.
            It throws the exception if cplex is not installed on the host machine.
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">try
{
    Set i = Set("i").HasElementsUntil(3);
    Set j = Set("j").HasElementsUntil(4);
    VarD2 y = Variable("y").HasIndices(i, j).IsBinary();
    Objective maxCount = maximize | sum(over(i, j), y[i, j]);
    MathModel model = MathModel.New("dummy model").WithObjective(maxCount).HasNoConstraints();
    Cplex cplex = new();
    CplexParams pars = new()
    {
        Silent = true,
    };
    var resSolution = await cplex.Solve(model, pars);
    var solution = resSolution.Unwrap(); // normally, check if it is 'IsOk' before unwrapping!
    var mapY = solution.VarIndicesAndValuesOf(y).Unwrap();
    Assert.Equal(solution.ObjectiveValue, Some(12)); // 4*3 binaries get value 1
    Assert.Equal(mapY[(0, 0)], 1); // all gets 1 in this dummy maximization problem
}
catch
{
    Assert.Equal(e.ErrorType, MathModelError.SolverNotFound);
    Assert.Equal(e.Message, "Could not locate the solver 'cplex' at 'cplex'. Please check and make sure that the solver is installed and added to path variables. Alternatively, construct the solver by passing explicitly the correct path of the solver.");
}</code></pre></div></div><p>
            The problem on the host machine could have been observed earlier by the following:
            </p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Cplex cplex = new();
Res availability = cplex.CheckAvailability();
if (availability.IsOk)
    // everything is okay, cplex can be used.
else
    string errorMessage = availability.ErrorMessage.Unwrap();
    // the solver is not available.</code></pre></div></div><p>
            Possible fixes to this problem are as follows:
            </p><ul><li>Make sure that the desired solver is installed on the host machine; such as cplex or scip.</li><li>Make sure that the solver's binary directory is included in the path variable.</li><li>Alternatively, one can provide the absolute path of the solver as follows:</li></ul><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">Cplex cplex = new(@"C:\Program Files\IBM\ILOG\CPLEX_Studio221\cplex\bin\x64_win64\cplex.exe");
Scip scip = new(@"C:\Program Files\SCIPOptSuite 8.0.1\bin\scip.exe");
// etc.</code></pre></div></div></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Reference</h4><div><a href="c3592f1a-23b2-69a1-41bc-65190f93ccd3.htm">Orx.MathProg.ErrorHandling Namespace</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Definition</a></li><li><a class="quickLink">Members</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column">https://github.com/orxfun/orx-mathprog-gallery<div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:orx.ugur.arikan%40gmail.com?Subject=Orx.MathProg%20(C#)">orx.ugur.arikan@gmail.com</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"> 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>